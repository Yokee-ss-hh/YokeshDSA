Binary Tree:
                     1
                    / \
                   2   3
                  / \  / \
                 4   5 6  7                    
A binary tree is a datastrcuture in which every parent node can have atmost 2 child nodes.
Parent node can have 0 childs or 1 child or 2 childs 
Root: Top most node in a tree = 1
Edges: Connecting lines b/w nodes = 6
Nodes: 7
*** Number of edges =  Number of nodes-1
*** At each level of i, the maximum number of nodes is 2i
*** Maximum number of nodes possible at height h is (2^0 + 2^1 + 2^2+â€¦.2^h) = 2^(h+1)-1
Parents: 1,2,3
Child of 1: 2,3
Child of 2: 4,5
Child of 3: 6,7
Siblings of parent 1: 2,3
Siblings of parent 2: 4,5
Siblings of parent 3: 6,7
Leaf nodes: Nodes that don't have any children = 4,5,6,7
Internal/ Non-terminal nodes: The nodes which has atleast 1 child = 1,2,3
Degree: Total number of children of any node in a tree
Degree of 1: 2
Degree of 2: 2
Degree of 3: 2
Degree of 4,5,6,7: 0
Depth: The maximum number of edges in a path from root node to that particular node 
Height: The maximum number of edges in a path from that particular node to the leaf node
Path: The sequence of nodes and edges from one node to another is called a path
Subtree: Each child from a node forms a subtree recursively. Every child node will form a subtree on its parent node
Width of tree: The width of one level is defined as the length between 2 end nodes( the left most and the right most non null nodes 
in the level, where the null nodes between the end nodes are also counted in the length calculation)
Maximum width of tree: Maximum width in all possible widths of a tree
Diameter of binary tree: The diameter of a tree is the length of the longest path between any 2 nodes of a tree.
The length of a path is counted as the number of edges lying on that path.
Maximum diameter of binary tree: The length of longest path between any 2 leaf nodes which has maximum diameter of all possible diameters 
------------------
Full Binary Tree / Strict Binary Tree / Proper Binary Tree / 2-Tree:
Every parent node can have either 0 child or 2 childs 
                     1
                    / \
                   2   3
                  / \  / \
                 4   5 6  7
                         / \
                        8   9
------------------
Perfect Binary Tree:
Every parent should have exactly 2 childrens and all leaves should be at same level
                     1
                    / \
                   2   3
                  / \  / \
                 4   5 6  7

*** Let 'n' is the depth of perfect binary tree. Then,
*** Total number of nodes: 2^(n+1)-1
*** Total number of leaf nodes: 2^n 
------------------
Degenerate binary trees are of 2 types -> Left Skew and Right Skew Binary Trees 
Left Skewed Binary Tree:
Left skewed binary trees in which all the nodes are having a left child or no child at all
Left dominated tree
All the right nodes are NULL
                       1
                      /
                     2
                    /
                   3
                  /
                 4
-----------------
Right Skewed Binary Tree:
Right skewed binary trees in which all the nodes are having a right child or no child at all
Right dominated tree
All the left nodes are NULL
                       1
                        \
                         2
                          \
                           3
                            \
                             4
-----------------
Complete Binary Tree:
A complete binary tree is a special type of binary tree where all the levels of the tree are filled completely except the lowest level nodes which are filled from as left as possible
A Complete Binary Tree of having h will be a Perfect Binary Tree up to h-1 height and In the last level, the elements will be filled from left to right without skipping.
Any BT which can represent an array without having blank space (or null values) in the middle of any nodes.
                     1                                      
                    / \
                   2   3
                  / \  / 
                 4   5 6  
Array = [1,2,3,4,5,6,None] ---> Complete binary tree
                     1                                      
                    / \
                   2   3
                  /    / 
                 4    6  
Array = [1,2,3,4,None,6,None] ---> Not a complete binary tree as 'None' is in b/w 2 nodes

       x
     /   \
    /     \
   x       x
  / \     / \
 x   x   x   x
/ \ /
x x x
Array = [x,x,x,x,x,x,x,x,x,x,None,None,None,None,None] ---> Complete binary tree 
-------------------
Binary Search Tree:
All nodes of left subtree are less than the root node
All nodes of right subtree are more than the root node
Both subtrees of each node are also BSTs i.e. they have the above two properties
               27
             /   \
            14    35
           /  \  /  \
          10 19 31  42

Left sub tree of root(27) i.e, 14,10,19 all 3 nodes less than 27
Right sub tree of root(27) i.e, 35,31,42 all 3 nodes greater than 27
Left sub tree of 14 i.e, 10 less than 14
Right sub tree of 14 i.e, 19 less than 14
Left sub tree of 35 i.e, 31 less than 35
Right sub tree of 35 i.e, less than 42
-------------------
Balanced Binary Tree (or) Height balanced tree:
The absolute difference of heights of left and right subtrees at any node is either 0 or 1.
i.e, |height of left subtree - height of right subtree| = 0 or 1 
If any node has no children, take heights of left and right childs as -1
For each node, its left subtree is a balanced binary tree
For each node, its right subtree is a balanced binary tree
Full Balanced Binary Tree: 
If difference b/w left and right subtrees of all nodes is 0, then it is a full balanced binary tree 
For full balanced binary tree, balance factor = 0
                       1
                      / \
                     /   \
                    2     3
                   / \   
                  4   5
For node 1, it has 2 childs i.e, 2 and 3,
height of left child 2 = 1 
height of right child 3 = 0 
So For node 1, balance factor = |1-0| = 1
For node 2, There are 2 childs 4 and 5
height of 4 = 0
height of 5 = 0
So For node 2, balance factor = |0-0| = 0
For node 4, There are no left and right subtrees, so take heights as -1 for Both
balance factor for node 4 = |-1-(-1)| = 0
Similarly for node 5, balance factor = 0
For node 3, There are no left and right subtrees, so take heights as -1
balance factor of node 3 = |-1-(-1)| = 0 
Overall Tree is balanced finally
If difference b/w left and right subtrees of all nodes in a binary tree is 1, then it has a balance factor = 1
If in a tree, There are more than 2 balance factors i.e, 0 and 1, then it is just a balanced binary tree.
---------------------
Balanced Binary Search Tree (or) Height balanced binary search tree:
All nodes of left subtree are less than the root node
All nodes of right subtree are more than the root node
Both subtrees of each node are also BSTs
The absolute difference of heights of left and right subtrees at any node is less than or equal to 1 
                              40
                             / \
                            36  49
                           / \   \
                          35  38  51
                               \
                                39
---------------------
Self balancing binary search trees: 1) AVL tree and 2) Red-Black tree 
-------
AVL Tree:
As we know for binary search tree, inseertion, deletion and searching all takes O(n) as worst case time complexity if bst is a left skewed  (or) right skewed 
So, We need balanced bst to make insertion, deletion and searching to take O(logn) TC which is the best case
So, AVL tree provides rotations on bst to make unbalanced bst to balanced bst at the any time of insertion and deletion so that the whole bst would be balanced
so that the insertion, deletion and searching takes O(logn) TC always at any point of time. 
Where n = height of bst 
--------------------
Heaps: -> 2 types -> Max Heap and Min Heap 
Heap is a complete binary tree
Max Heap: Any node in the binary tree is greater than their child nodes, Root node is greater than all of 
it's child nodes. 
Min Heap: Any node in the binary tree is lesser than their child nodes, Root node is lesser than all of 
it's child nodes.
                         9
                        / \
                       5   4
                      / \ /
                     1  3 2  

                     MAX HEAP 
                        
                        1
                       / \
                      2   3
                     / \ /
                    4  5 9 

                    MIN HEAP 

Parent node of any node of index i = A[(i-1)/2]
Left child node of a node at index i = A[(2*i)+1]
Right child node of a node at index i = A[(2*i)+2]
Heap is represented as array in level-order traversal fashion
For above diagrams representated as array:
Max Heap: [9,5,4,1,3,2]
Min Heap: [1,2,3,4,5,9]
----------------------


